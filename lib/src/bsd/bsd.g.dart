// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// BSD C Library
class DynamicBsdCLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  DynamicBsdCLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  DynamicBsdCLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int close(
    int arg0,
  ) {
    return _close(
      arg0,
    );
  }

  late final _closePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>('close');
  late final _close = _closePtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Int32> errno() {
    return _errno();
  }

  late final _errnoPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function()>>('__error');
  late final _errno = _errnoPtr.asFunction<ffi.Pointer<ffi.Int32> Function()>();

  int fstat(
    int arg0,
    ffi.Pointer<stat_t> arg1,
  ) {
    return _fstat(
      arg0,
      arg1,
    );
  }

  late final _fstatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Pointer<stat_t>)>>('fstat');
  late final _fstat =
      _fstatPtr.asFunction<int Function(int, ffi.Pointer<stat_t>)>();

  int getegid() {
    return _getegid();
  }

  late final _getegidPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function()>>('getegid');
  late final _getegid = _getegidPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Int8> getenv(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _getenv(
      arg0,
    );
  }

  late final _getenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>>('getenv');
  late final _getenv = _getenvPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  int geteuid() {
    return _geteuid();
  }

  late final _geteuidPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function()>>('geteuid');
  late final _geteuid = _geteuidPtr.asFunction<int Function()>();

  int getgid() {
    return _getgid();
  }

  late final _getgidPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function()>>('getgid');
  late final _getgid = _getgidPtr.asFunction<int Function()>();

  int gethostid() {
    return _gethostid();
  }

  late final _gethostidPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function()>>('gethostid');
  late final _gethostid = _gethostidPtr.asFunction<int Function()>();

  int gethostuuid(
    ffi.Pointer<ffi.Uint8> arg0,
    ffi.Pointer<timespec_t> arg1,
  ) {
    return _gethostuuid(
      arg0,
      arg1,
    );
  }

  late final _gethostuuidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Uint8>, ffi.Pointer<timespec_t>)>>('gethostuuid');
  late final _gethostuuid = _gethostuuidPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<timespec_t>)>();

  int getpeereid(
    int arg0,
    ffi.Pointer<ffi.Uint32> arg1,
    ffi.Pointer<ffi.Uint32> arg2,
  ) {
    return _getpeereid(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _getpeereidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Uint32>)>>('getpeereid');
  late final _getpeereid = _getpeereidPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Uint32>, ffi.Pointer<ffi.Uint32>)>();

  int getpgid(
    int arg0,
  ) {
    return _getpgid(
      arg0,
    );
  }

  late final _getpgidPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>('getpgid');
  late final _getpgid = _getpgidPtr.asFunction<int Function(int)>();

  int getpid() {
    return _getpid();
  }

  late final _getpidPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('getpid');
  late final _getpid = _getpidPtr.asFunction<int Function()>();

  int getppid() {
    return _getppid();
  }

  late final _getppidPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('getppid');
  late final _getppid = _getppidPtr.asFunction<int Function()>();

  int getsid(
    int arg0,
  ) {
    return _getsid(
      arg0,
    );
  }

  late final _getsidPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>('getsid');
  late final _getsid = _getsidPtr.asFunction<int Function(int)>();

  int getuid() {
    return _getuid();
  }

  late final _getuidPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function()>>('getuid');
  late final _getuid = _getuidPtr.asFunction<int Function()>();

  int lstat(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<stat_t> arg1,
  ) {
    return _lstat(
      arg0,
      arg1,
    );
  }

  late final _lstatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<stat_t>)>>('lstat');
  late final _lstat = _lstatPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<stat_t>)>();

  ffi.Pointer<ffi.Void> mmap(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    int arg5,
  ) {
    return _mmap(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _mmapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Uint64,
              ffi.Int32, ffi.Int32, ffi.Int32, ffi.Int64)>>('mmap');
  late final _mmap = _mmapPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, int, int, int, int, int)>();

  int munmap(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
  ) {
    return _munmap(
      arg0,
      arg1,
    );
  }

  late final _munmapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Void>, ffi.Uint64)>>('munmap');
  late final _munmap =
      _munmapPtr.asFunction<int Function(ffi.Pointer<ffi.Void>, int)>();

  int open(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
  ) {
    return _open(
      arg0,
      arg1,
    );
  }

  late final _openPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Int32)>>('open');
  late final _open =
      _openPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>, int)>();

  int putenv(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _putenv(
      arg0,
    );
  }

  late final _putenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'putenv');
  late final _putenv =
      _putenvPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int setegid(
    int arg0,
  ) {
    return _setegid(
      arg0,
    );
  }

  late final _setegidPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Uint32)>>('setegid');
  late final _setegid = _setegidPtr.asFunction<int Function(int)>();

  int setenv(
    ffi.Pointer<ffi.Int8> __name,
    ffi.Pointer<ffi.Int8> __value,
    int __overwrite,
  ) {
    return _setenv(
      __name,
      __value,
      __overwrite,
    );
  }

  late final _setenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              ffi.Int32)>>('setenv');
  late final _setenv = _setenvPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int)>();

  int seteuid(
    int arg0,
  ) {
    return _seteuid(
      arg0,
    );
  }

  late final _seteuidPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Uint32)>>('seteuid');
  late final _seteuid = _seteuidPtr.asFunction<int Function(int)>();

  int setgid(
    int arg0,
  ) {
    return _setgid(
      arg0,
    );
  }

  late final _setgidPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Uint32)>>('setgid');
  late final _setgid = _setgidPtr.asFunction<int Function(int)>();

  void sethostid(
    int arg0,
  ) {
    return _sethostid(
      arg0,
    );
  }

  late final _sethostidPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('sethostid');
  late final _sethostid = _sethostidPtr.asFunction<void Function(int)>();

  int setpgid(
    int arg0,
    int arg1,
  ) {
    return _setpgid(
      arg0,
      arg1,
    );
  }

  late final _setpgidPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32)>>(
          'setpgid');
  late final _setpgid = _setpgidPtr.asFunction<int Function(int, int)>();

  int setregid(
    int arg0,
    int arg1,
  ) {
    return _setregid(
      arg0,
      arg1,
    );
  }

  late final _setregidPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Uint32, ffi.Uint32)>>(
          'setregid');
  late final _setregid = _setregidPtr.asFunction<int Function(int, int)>();

  int setreuid(
    int arg0,
    int arg1,
  ) {
    return _setreuid(
      arg0,
      arg1,
    );
  }

  late final _setreuidPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Uint32, ffi.Uint32)>>(
          'setreuid');
  late final _setreuid = _setreuidPtr.asFunction<int Function(int, int)>();

  int setrgid(
    int arg0,
  ) {
    return _setrgid(
      arg0,
    );
  }

  late final _setrgidPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Uint32)>>('setrgid');
  late final _setrgid = _setrgidPtr.asFunction<int Function(int)>();

  int setruid(
    int arg0,
  ) {
    return _setruid(
      arg0,
    );
  }

  late final _setruidPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Uint32)>>('setruid');
  late final _setruid = _setruidPtr.asFunction<int Function(int)>();

  int setsid() {
    return _setsid();
  }

  late final _setsidPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('setsid');
  late final _setsid = _setsidPtr.asFunction<int Function()>();

  int setuid(
    int arg0,
  ) {
    return _setuid(
      arg0,
    );
  }

  late final _setuidPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Uint32)>>('setuid');
  late final _setuid = _setuidPtr.asFunction<int Function(int)>();

  int stat(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<stat_t> arg1,
  ) {
    return _stat(
      arg0,
      arg1,
    );
  }

  late final _statPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<stat_t>)>>('stat');
  late final _stat = _statPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<stat_t>)>();

  ffi.Pointer<ffi.Int8> strerror(
    int __errnum,
  ) {
    return _strerror(
      __errnum,
    );
  }

  late final _strerrorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(ffi.Int32)>>(
          'strerror');
  late final _strerror =
      _strerrorPtr.asFunction<ffi.Pointer<ffi.Int8> Function(int)>();

  int uname(
    ffi.Pointer<utsname_t> arg0,
  ) {
    return _uname(
      arg0,
    );
  }

  late final _unamePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<utsname_t>)>>(
          'uname');
  late final _uname =
      _unamePtr.asFunction<int Function(ffi.Pointer<utsname_t>)>();

  int unsetenv(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _unsetenv(
      arg0,
    );
  }

  late final _unsetenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'unsetenv');
  late final _unsetenv =
      _unsetenvPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();
}

const int MAP_32BIT = 32768;

const int MAP_ANON = 4096;

const int MAP_ANONYMOUS = 4096;

const int MAP_COPY = 2;

const int MAP_FILE = 0;

const int MAP_FIXED = 16;

const int MAP_HASSEMAPHORE = 512;

const int MAP_JIT = 2048;

const int MAP_NOCACHE = 1024;

const int MAP_NOEXTEND = 256;

const int MAP_NORESERVE = 64;

const int MAP_PRIVATE = 2;

const int MAP_RENAME = 32;

const int MAP_RESERVED0080 = 128;

const int MAP_RESILIENT_CODESIGN = 8192;

const int MAP_RESILIENT_MEDIA = 16384;

const int MAP_SHARED = 1;

const int MAP_TRANSLATED_ALLOW_EXECUTE = 131072;

const int MAP_UNIX03 = 262144;

const int O_ACCMODE = 3;

const int O_ALERT = 536870912;

const int O_APPEND = 8;

const int O_ASYNC = 64;

const int O_CLOEXEC = 16777216;

const int O_CREAT = 512;

const int O_DIRECTORY = 1048576;

const int O_DP_GETRAWENCRYPTED = 1;

const int O_DP_GETRAWUNENCRYPTED = 2;

const int O_DSYNC = 4194304;

const int O_EVTONLY = 32768;

const int O_EXCL = 2048;

const int O_EXLOCK = 32;

const int O_FSYNC = 128;

const int O_NDELAY = 4;

const int O_NOCTTY = 131072;

const int O_NOFOLLOW = 256;

const int O_NOFOLLOW_ANY = 536870912;

const int O_NONBLOCK = 4;

const int O_POPUP = 2147483648;

const int O_RDONLY = 0;

const int O_RDWR = 2;

const int O_SHLOCK = 16;

const int O_SYMLINK = 2097152;

const int O_SYNC = 128;

const int O_TRUNC = 1024;

const int O_WRONLY = 1;

const int PROT_EXEC = 4;

const int PROT_NONE = 0;

const int PROT_READ = 1;

const int PROT_WRITE = 2;

const int SYS_NAMELEN = 256;

class stat_t extends ffi.Struct {
  @ffi.Int32()
  external int st_dev;

  @ffi.Uint16()
  external int st_mode;

  @ffi.Uint16()
  external int st_nlink;

  @ffi.Uint64()
  external int st_ino;

  @ffi.Uint32()
  external int st_uid;

  @ffi.Uint32()
  external int st_gid;

  @ffi.Int32()
  external int st_rdev;

  external timespec_t st_atimespec;

  external timespec_t st_mtimespec;

  external timespec_t st_ctimespec;

  external timespec_t st_birthtimespec;

  @ffi.Int64()
  external int st_size;

  @ffi.Int64()
  external int st_blocks;

  @ffi.Int32()
  external int st_blksize;

  @ffi.Uint32()
  external int st_flags;

  @ffi.Uint32()
  external int st_gen;

  @ffi.Int32()
  external int st_lspare;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Int64> st_qspare;
}

class timespec_t extends ffi.Struct {
  @ffi.Int64()
  external int tv_sec;

  @ffi.Int64()
  external int tv_nsec;
}

class utsname_t extends ffi.Struct {
  @ffi.Array.multi([256])
  external ffi.Array<ffi.Int8> sysname;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.Int8> nodename;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.Int8> release;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.Int8> version;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.Int8> machine;
}
